SOLO PROJECTS: Digital business card(after 1st section), airbnb experencies clone(travel journal) (after 2nd section), Quiz game (last)

· There are some things you need to consider when building an application:
    - User inteface - How users will consume and interact with your application 
    - Routing - How users will navigate your app 
    - Data Fetching - Where your data lives and how to get it 
    - Rendering - When and where you render static or dynamic content 
    - Integrations - What 3rd party services you use and how to integrate them
    - Infrastructure - Wjere to deploy, store, and run your application code 
    - Perfromance 
    - Scalability
    - Developer Experience 

· React is a js library used for building interactive UI 

· A library is a collection of reusable code 
    · Reduces need to write repetive things from scratch
    · There are no boundaries 

· A framework is a predetermined architecture - you follow a specified pattern of development 
    · You have to work within its boundaries 

· React is composable - We can have more custom components and make them work together 
· React is Declarative -> That is, it does a lot by itself, opposite to imperative, where every step has to be explained to the computer

· React with JSX creates an object that describes the DOM element we want to insert instead of a simple html element:
        const element = <h1 className="header">This is JSX</h1>
        console.log(element)
        //the resulting object is:
        /*
        {
            type: "h1", 
            key: null, 
            ref: null, 
            props: {
                className: "header", 
                children: "This is JSX"
            }, 
            _owner: null, 
            _store: {}
        }
        */

· When using JSX, we can return only 1 parent element(you can't put a <div> after another <div> or <p> or whatever):
        ReactDOM.render(
            <h1>Hello</h1><p>Hi</p> //error, we can instead wrap this into a parent element
            <div>
                <h1>Hello</h1> 
                <p>Hi</p>
            </div>,            //this is ok
            document.getElementById("root")
        )

· A function that returns markup lines is called a COMPONENT; It has some conventions:
    1. The function name is pascal-cased, that is: TemporaryName(), CustomComponent(), ... -> The first letter is capital 
    2· When calling it in render, we need to wrap it into <FunctionName/> without the parentheses:
            ReactDOM.render(<FunctionName/>, ...)

· We can use variables defined is JS code inside a React markup(JSX) by adding {} to surrond the js code:
        let firstName = "john";
        let lastName = "doe";
        let date = new Date();
        <h1> Hello {firstName} {lastName}</h1> //Hello john doe (as an h1 on a page)
        <h1> It is now {date.getHours()}:{date.getMinutes()}</h1>

· PROPS are custom properties for custom components that are used to make framework components used in a webpage (it's an object that 
  contains all custom properties we defined):
        function Component(props){
            return (
                <div>                         //imagine we have several components that follow this framework
                    <img src={props.img} />  
                    <h1>{props.name}</h1>
                    <p>{props.description}<p>
                </div>
            );
        }
    · Every time we have an instance of Component, the function is called:
            //...
            <Component
                img="./..."
                name="name"
                description="lorem"
            />
            <Component
                //...
            />

· CONDITIONAL RENDERING can be used if we want to render an element only in specific situations. One way to do it is:
        //...
        <div>
            {props.prop && <h1>Prop: {props.prop} </h1>} // if first is falsy, then it won't render 
        //...

· In order to pass a non-string prop while in markup is using curly braces "{}" :
        //...
        <Component
            name="john"
            isEmployed={false}  
            appearences={[ {height: 190}, {weight: 32}, {hair: "dark-brown"} ]}   // an array of objects 
        / >